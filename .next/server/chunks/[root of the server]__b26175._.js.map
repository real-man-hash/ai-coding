{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 33, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/ai/custom-middleware.ts"],"sourcesContent":["import { Experimental_LanguageModelV1Middleware } from \"ai\";\n\nexport const customMiddleware: Experimental_LanguageModelV1Middleware = {};\n"],"names":[],"mappings":";;;AAEO,MAAM,mBAA2D,CAAC"}},
    {"offset": {"line": 37, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 42, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/ai/index.ts"],"sourcesContent":["import { google } from \"@ai-sdk/google\";\nimport { experimental_wrapLanguageModel as wrapLanguageModel } from \"ai\";\n\nimport { customMiddleware } from \"./custom-middleware\";\n\nexport const geminiProModel = wrapLanguageModel({\n  model: google(\"gemini-2.5-pro\"),\n  middleware: customMiddleware,\n});\n\nexport const geminiFlashModel = wrapLanguageModel({\n  model: google(\"gemini-2.5-flash\"),\n  middleware: customMiddleware,\n});\n"],"names":[],"mappings":";;;;;;;;;;;AAKO,MAAM,iBAAiB,CAAA,GAAA,wTAAA,CAAA,iCAAiB,AAAD,EAAE;IAC9C,OAAO,CAAA,GAAA,gPAAA,CAAA,SAAM,AAAD,EAAE;IACd,YAAY,4HAAA,CAAA,mBAAgB;AAC9B;AAEO,MAAM,mBAAmB,CAAA,GAAA,wTAAA,CAAA,iCAAiB,AAAD,EAAE;IAChD,OAAO,CAAA,GAAA,gPAAA,CAAA,SAAM,AAAD,EAAE;IACd,YAAY,4HAAA,CAAA,mBAAgB;AAC9B"}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/ai/actions.ts"],"sourcesContent":["import { generateObject } from \"ai\";\nimport { z } from \"zod\";\n\nimport { geminiFlashModel } from \".\";\n\nexport async function generateSampleFlightStatus({\n  flightNumber,\n  date,\n}: {\n  flightNumber: string;\n  date: string;\n}) {\n  const { object: flightStatus } = await generateObject({\n    model: geminiFlashModel,\n    prompt: `Flight status for flight number ${flightNumber} on ${date}`,\n    schema: z.object({\n      flightNumber: z.string().describe(\"Flight number, e.g., BA123, AA31\"),\n      departure: z.object({\n        cityName: z.string().describe(\"Name of the departure city\"),\n        airportCode: z.string().describe(\"IATA code of the departure airport\"),\n        airportName: z.string().describe(\"Full name of the departure airport\"),\n        timestamp: z.string().describe(\"ISO 8601 departure date and time\"),\n        terminal: z.string().describe(\"Departure terminal\"),\n        gate: z.string().describe(\"Departure gate\"),\n      }),\n      arrival: z.object({\n        cityName: z.string().describe(\"Name of the arrival city\"),\n        airportCode: z.string().describe(\"IATA code of the arrival airport\"),\n        airportName: z.string().describe(\"Full name of the arrival airport\"),\n        timestamp: z.string().describe(\"ISO 8601 arrival date and time\"),\n        terminal: z.string().describe(\"Arrival terminal\"),\n        gate: z.string().describe(\"Arrival gate\"),\n      }),\n      totalDistanceInMiles: z\n        .number()\n        .describe(\"Total flight distance in miles\"),\n    }),\n  });\n\n  return flightStatus;\n}\n\nexport async function generateSampleFlightSearchResults({\n  origin,\n  destination,\n}: {\n  origin: string;\n  destination: string;\n}) {\n  const { object: flightSearchResults } = await generateObject({\n    model: geminiFlashModel,\n    prompt: `Generate search results for flights from ${origin} to ${destination}, limit to 4 results`,\n    output: \"array\",\n    schema: z.object({\n      id: z\n        .string()\n        .describe(\"Unique identifier for the flight, like BA123, AA31, etc.\"),\n      departure: z.object({\n        cityName: z.string().describe(\"Name of the departure city\"),\n        airportCode: z.string().describe(\"IATA code of the departure airport\"),\n        timestamp: z.string().describe(\"ISO 8601 departure date and time\"),\n      }),\n      arrival: z.object({\n        cityName: z.string().describe(\"Name of the arrival city\"),\n        airportCode: z.string().describe(\"IATA code of the arrival airport\"),\n        timestamp: z.string().describe(\"ISO 8601 arrival date and time\"),\n      }),\n      airlines: z.array(\n        z.string().describe(\"Airline names, e.g., American Airlines, Emirates\"),\n      ),\n      priceInUSD: z.number().describe(\"Flight price in US dollars\"),\n      numberOfStops: z.number().describe(\"Number of stops during the flight\"),\n    }),\n  });\n\n  return { flights: flightSearchResults };\n}\n\nexport async function generateSampleSeatSelection({\n  flightNumber,\n}: {\n  flightNumber: string;\n}) {\n  const { object: rows } = await generateObject({\n    model: geminiFlashModel,\n    prompt: `Simulate available seats for flight number ${flightNumber}, 6 seats on each row and 5 rows in total, adjust pricing based on location of seat`,\n    output: \"array\",\n    schema: z.array(\n      z.object({\n        seatNumber: z.string().describe(\"Seat identifier, e.g., 12A, 15C\"),\n        priceInUSD: z\n          .number()\n          .describe(\"Seat price in US dollars, less than $99\"),\n        isAvailable: z\n          .boolean()\n          .describe(\"Whether the seat is available for booking\"),\n      }),\n    ),\n  });\n\n  return { seats: rows };\n}\n\nexport async function generateReservationPrice(props: {\n  seats: string[];\n  flightNumber: string;\n  departure: {\n    cityName: string;\n    airportCode: string;\n    timestamp: string;\n    gate: string;\n    terminal: string;\n  };\n  arrival: {\n    cityName: string;\n    airportCode: string;\n    timestamp: string;\n    gate: string;\n    terminal: string;\n  };\n  passengerName: string;\n}) {\n  const { object: reservation } = await generateObject({\n    model: geminiFlashModel,\n    prompt: `Generate price for the following reservation \\n\\n ${JSON.stringify(props, null, 2)}`,\n    schema: z.object({\n      totalPriceInUSD: z\n        .number()\n        .describe(\"Total reservation price in US dollars\"),\n    }),\n  });\n\n  return reservation;\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 157, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 298, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/db/schema.ts"],"sourcesContent":["import { Message } from \"ai\";\nimport { InferSelectModel } from \"drizzle-orm\";\nimport {\n  mysqlTable,\n  varchar,\n  timestamp,\n  json,\n  char,\n  boolean,\n  int,\n} from \"drizzle-orm/mysql-core\";\n\nexport const user = mysqlTable(\"user\", {\n  id: char(\"id\", { length: 36 }).primaryKey().notNull().$defaultFn(() => crypto.randomUUID()),\n  email: varchar(\"email\", { length: 64 }).notNull(),\n  password: varchar(\"password\", { length: 64 }),\n  createdAt: timestamp(\"createdAt\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updatedAt\").onUpdateNow(),\n});\n\nexport type User = InferSelectModel<typeof user>;\n\nexport const chat = mysqlTable(\"chat\", {\n  id: char(\"id\", { length: 36 }).primaryKey().notNull().$defaultFn(() => crypto.randomUUID()),\n  createdAt: timestamp(\"createdAt\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updatedAt\").onUpdateNow(),\n  messages: json(\"messages\").notNull(),\n  userId: char(\"userId\", { length: 36 })\n    .notNull()\n    .references(() => user.id, { onDelete: 'cascade' }),\n});\n\nexport type Chat = Omit<InferSelectModel<typeof chat>, \"messages\"> & {\n  messages: Array<Message>;\n};\n\nexport const reservation = mysqlTable(\"reservation\", {\n  id: char(\"id\", { length: 36 }).primaryKey().notNull().$defaultFn(() => crypto.randomUUID()),\n  createdAt: timestamp(\"createdAt\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updatedAt\").onUpdateNow(),\n  details: json(\"details\").notNull(),\n  hasCompletedPayment: boolean(\"hasCompletedPayment\").notNull().default(false),\n  userId: char(\"userId\", { length: 36 })\n    .notNull()\n    .references(() => user.id, { onDelete: 'cascade' }),\n});\n\nexport type Reservation = InferSelectModel<typeof reservation>;\n"],"names":[],"mappings":";;;;;;;;;;;;;AAYO,MAAM,OAAO,CAAA,GAAA,oUAAA,CAAA,aAAU,AAAD,EAAE,QAAQ;IACrC,IAAI,CAAA,GAAA,8UAAA,CAAA,OAAI,AAAD,EAAE,MAAM;QAAE,QAAQ;IAAG,GAAG,UAAU,GAAG,OAAO,GAAG,UAAU,CAAC,IAAM,OAAO,UAAU;IACxF,OAAO,CAAA,GAAA,iVAAA,CAAA,UAAO,AAAD,EAAE,SAAS;QAAE,QAAQ;IAAG,GAAG,OAAO;IAC/C,UAAU,CAAA,GAAA,iVAAA,CAAA,UAAO,AAAD,EAAE,YAAY;QAAE,QAAQ;IAAG;IAC3C,WAAW,CAAA,GAAA,mVAAA,CAAA,YAAS,AAAD,EAAE,aAAa,OAAO,GAAG,UAAU;IACtD,WAAW,CAAA,GAAA,mVAAA,CAAA,YAAS,AAAD,EAAE,aAAa,WAAW;AAC/C;AAIO,MAAM,OAAO,CAAA,GAAA,oUAAA,CAAA,aAAU,AAAD,EAAE,QAAQ;IACrC,IAAI,CAAA,GAAA,8UAAA,CAAA,OAAI,AAAD,EAAE,MAAM;QAAE,QAAQ;IAAG,GAAG,UAAU,GAAG,OAAO,GAAG,UAAU,CAAC,IAAM,OAAO,UAAU;IACxF,WAAW,CAAA,GAAA,mVAAA,CAAA,YAAS,AAAD,EAAE,aAAa,OAAO,GAAG,UAAU;IACtD,WAAW,CAAA,GAAA,mVAAA,CAAA,YAAS,AAAD,EAAE,aAAa,WAAW;IAC7C,UAAU,CAAA,GAAA,8UAAA,CAAA,OAAI,AAAD,EAAE,YAAY,OAAO;IAClC,QAAQ,CAAA,GAAA,8UAAA,CAAA,OAAI,AAAD,EAAE,UAAU;QAAE,QAAQ;IAAG,GACjC,OAAO,GACP,UAAU,CAAC,IAAM,KAAK,EAAE,EAAE;QAAE,UAAU;IAAU;AACrD;AAMO,MAAM,cAAc,CAAA,GAAA,oUAAA,CAAA,aAAU,AAAD,EAAE,eAAe;IACnD,IAAI,CAAA,GAAA,8UAAA,CAAA,OAAI,AAAD,EAAE,MAAM;QAAE,QAAQ;IAAG,GAAG,UAAU,GAAG,OAAO,GAAG,UAAU,CAAC,IAAM,OAAO,UAAU;IACxF,WAAW,CAAA,GAAA,mVAAA,CAAA,YAAS,AAAD,EAAE,aAAa,OAAO,GAAG,UAAU;IACtD,WAAW,CAAA,GAAA,mVAAA,CAAA,YAAS,AAAD,EAAE,aAAa,WAAW;IAC7C,SAAS,CAAA,GAAA,8UAAA,CAAA,OAAI,AAAD,EAAE,WAAW,OAAO;IAChC,qBAAqB,CAAA,GAAA,iVAAA,CAAA,UAAO,AAAD,EAAE,uBAAuB,OAAO,GAAG,OAAO,CAAC;IACtE,QAAQ,CAAA,GAAA,8UAAA,CAAA,OAAI,AAAD,EAAE,UAAU;QAAE,QAAQ;IAAG,GACjC,OAAO,GACP,UAAU,CAAC,IAAM,KAAK,EAAE,EAAE;QAAE,UAAU;IAAU;AACrD"}},
    {"offset": {"line": 351, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 363, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/db/queries.ts"],"sourcesContent":["import \"server-only\";\n\nimport { genSaltSync, hashSync } from \"bcrypt-ts\";\nimport { desc, eq, and } from \"drizzle-orm\";\nimport { drizzle } from \"drizzle-orm/mysql2\";\nimport mysql from \"mysql2/promise\";\n\nimport { user, chat, User, reservation, Chat, Reservation } from \"./schema\";\n\n// Create a connection pool\nconst pool = mysql.createPool({\n  uri: process.env.DATABASE_URL,\n  waitForConnections: true,\n  connectionLimit: 10,\n  queueLimit: 0\n});\n\nconst db = drizzle(pool);\n\nexport async function getUser(email: string): Promise<User[]> {\n  try {\n    const result = await db.select().from(user).where(eq(user.email, email));\n    return result || [];\n  } catch (error) {\n    console.error(\"Failed to get user from database\", error);\n    return [];\n  }\n}\n\nexport async function createUser(email: string, password: string): Promise<User> {\n  const connection = await pool.getConnection();\n  try {\n    await connection.beginTransaction();\n    \n    const salt = genSaltSync(10);\n    const hash = hashSync(password, salt);\n    \n    // First insert the user\n    await db.insert(user).values({ \n      email, \n      password: hash,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    });\n    \n    // Then fetch the newly created user\n    const [newUser] = await db.select()\n      .from(user)\n      .where(eq(user.email, email))\n      .limit(1);\n    \n    await connection.commit();\n    \n    if (!newUser) {\n      throw new Error('Failed to retrieve created user');\n    }\n    \n    return newUser;\n  } catch (error) {\n    await connection.rollback();\n    console.error(\"Failed to create user in database\", error);\n    throw error;\n  } finally {\n    connection.release();\n  }\n}\n\nexport async function saveChat({\n  id,\n  messages,\n  userId,\n}: {\n  id: string;\n  messages: any;\n  userId: string;\n}): Promise<Chat> {\n  const connection = await pool.getConnection();\n  try {\n    await connection.beginTransaction();\n    \n    const existingChat = await db\n      .select()\n      .from(chat)\n      .where(eq(chat.id, id));\n\n    let result;\n    if (existingChat.length > 0) {\n      [result] = await db\n        .update(chat)\n        .set({ \n          messages: JSON.stringify(messages),\n          updatedAt: new Date()\n        })\n        .where(eq(chat.id, id));\n    } else {\n      [result] = await db.insert(chat).values({\n        id,\n        messages: JSON.stringify(messages),\n        userId,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      });\n    }\n    \n    await connection.commit();\n    \n    // Fetch the saved chat to return\n    const [savedChat] = await db.select()\n      .from(chat)\n      .where(eq(chat.id, id))\n      .limit(1);\n      \n    return savedChat;\n  } catch (error) {\n    await connection.rollback();\n    console.error(\"Failed to save chat to database\", error);\n    throw error;\n  } finally {\n    connection.release();\n  }\n}\n\nexport async function deleteChatById({ id }: { id: string }): Promise<void> {\n  const connection = await pool.getConnection();\n  try {\n    await connection.beginTransaction();\n    await db.delete(chat).where(eq(chat.id, id));\n    await connection.commit();\n  } catch (error) {\n    await connection.rollback();\n    console.error(\"Failed to delete chat from database\", error);\n    throw error;\n  } finally {\n    connection.release();\n  }\n}\n\nexport async function getChatsByUserId({ id }: { id: string }): Promise<Chat[]> {\n  try {\n    return await db\n      .select()\n      .from(chat)\n      .where(eq(chat.userId, id))\n      .orderBy(desc(chat.createdAt));\n  } catch (error) {\n    console.error(\"Failed to get chats from database\", error);\n    throw error;\n  }\n}\n\nexport async function getChatById({ id }: { id: string }): Promise<Chat | undefined> {\n  try {\n    const [result] = await db\n      .select()\n      .from(chat)\n      .where(eq(chat.id, id))\n      .limit(1);\n    return result;\n  } catch (error) {\n    console.error(\"Failed to get chat from database\", error);\n    throw error;\n  }\n}\n\nexport async function createReservation({\n  id,\n  userId,\n  details,\n}: {\n  id: string;\n  userId: string;\n  details: any;\n}): Promise<Reservation> {\n  const connection = await pool.getConnection();\n  try {\n    await connection.beginTransaction();\n    \n    await db.insert(reservation).values({\n      id,\n      userId,\n      details: JSON.stringify(details),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      hasCompletedPayment: false\n    });\n    \n    await connection.commit();\n    \n    // Fetch the created reservation to return\n    const [newReservation] = await db\n      .select()\n      .from(reservation)\n      .where(eq(reservation.id, id))\n      .limit(1);\n      \n    return newReservation;\n  } catch (error) {\n    await connection.rollback();\n    console.error(\"Failed to create reservation in database\", error);\n    throw error;\n  } finally {\n    connection.release();\n  }\n}\n\nexport async function getReservationById({ id }: { id: string }): Promise<Reservation | undefined> {\n  try {\n    const [selectedReservation] = await db\n      .select()\n      .from(reservation)\n      .where(eq(reservation.id, id));\n\n    return selectedReservation;\n  } catch (error) {\n    console.error(\"Failed to get reservation from database\", error);\n    throw error;\n  }\n}\n\nexport async function updateReservation({\n  id,\n  hasCompletedPayment,\n}: {\n  id: string;\n  hasCompletedPayment: boolean;\n}): Promise<Reservation> {\n  const connection = await pool.getConnection();\n  try {\n    await connection.beginTransaction();\n    \n    await db\n      .update(reservation)\n      .set({ \n        hasCompletedPayment,\n        updatedAt: new Date()\n      })\n      .where(eq(reservation.id, id));\n      \n    await connection.commit();\n    \n    // Fetch the updated reservation to return\n    const [updatedReservation] = await db\n      .select()\n      .from(reservation)\n      .where(eq(reservation.id, id))\n      .limit(1);\n      \n    return updatedReservation;\n  } catch (error) {\n    await connection.rollback();\n    console.error(\"Failed to update reservation in database\", error);\n    throw error;\n  } finally {\n    connection.release();\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 549, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 554, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/app/(auth)/auth.config.ts"],"sourcesContent":["import { NextAuthConfig } from \"next-auth\";\n\nexport const authConfig = {\n  pages: {\n    signIn: \"/login\",\n    newUser: \"/\",\n  },\n  providers: [\n    // added later in auth.ts since it requires bcrypt which is only compatible with Node.js\n    // while this file is also used in non-Node.js environments\n  ],\n  callbacks: {\n    authorized({ auth, request: { nextUrl } }) {\n      let isLoggedIn = !!auth?.user;\n      let isOnChat = nextUrl.pathname.startsWith(\"/\");\n      let isOnRegister = nextUrl.pathname.startsWith(\"/register\");\n      let isOnLogin = nextUrl.pathname.startsWith(\"/login\");\n\n      if (isLoggedIn && (isOnLogin || isOnRegister)) {\n        return Response.redirect(new URL(\"/\", nextUrl));\n      }\n\n      if (isOnRegister || isOnLogin) {\n        return true; // Always allow access to register and login pages\n      }\n\n      if (isOnChat) {\n        if (isLoggedIn) return true;\n        return false; // Redirect unauthenticated users to login page\n      }\n\n      if (isLoggedIn) {\n        return Response.redirect(new URL(\"/\", nextUrl));\n      }\n\n      return true;\n    },\n  },\n} satisfies NextAuthConfig;\n"],"names":[],"mappings":";;;AAEO,MAAM,aAAa;IACxB,OAAO;QACL,QAAQ;QACR,SAAS;IACX;IACA,WAAW,EAGV;IACD,WAAW;QACT,YAAW,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,EAAE;YACvC,IAAI,aAAa,CAAC,CAAC,MAAM;YACzB,IAAI,WAAW,QAAQ,QAAQ,CAAC,UAAU,CAAC;YAC3C,IAAI,eAAe,QAAQ,QAAQ,CAAC,UAAU,CAAC;YAC/C,IAAI,YAAY,QAAQ,QAAQ,CAAC,UAAU,CAAC;YAE5C,IAAI,cAAc,CAAC,aAAa,YAAY,GAAG;gBAC7C,OAAO,SAAS,QAAQ,CAAC,IAAI,IAAI,KAAK;YACxC;YAEA,IAAI,gBAAgB,WAAW;gBAC7B,OAAO,MAAM,kDAAkD;YACjE;YAEA,IAAI,UAAU;gBACZ,IAAI,YAAY,OAAO;gBACvB,OAAO,OAAO,+CAA+C;YAC/D;YAEA,IAAI,YAAY;gBACd,OAAO,SAAS,QAAQ,CAAC,IAAI,IAAI,KAAK;YACxC;YAEA,OAAO;QACT;IACF;AACF"}},
    {"offset": {"line": 586, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 591, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/app/(auth)/auth.ts"],"sourcesContent":["import { compare } from \"bcrypt-ts\";\nimport NextAuth, { User, Session } from \"next-auth\";\nimport Credentials from \"next-auth/providers/credentials\";\n\nimport { getUser } from \"@/db/queries\";\n\nimport { authConfig } from \"./auth.config\";\n\ninterface ExtendedSession extends Session {\n  user: User;\n}\n\nexport const {\n  handlers: { GET, POST },\n  auth,\n  signIn,\n  signOut,\n} = NextAuth({\n  ...authConfig,\n  providers: [\n    Credentials({\n      credentials: {\n        email: { label: \"Email\", type: \"email\" },\n        password: { label: \"Password\", type: \"password\" }\n      },\n      async authorize(credentials) {\n        console.log('Authorization attempt with credentials:', {\n          email: credentials?.email ? 'provided' : 'missing',\n          password: credentials?.password ? 'provided' : 'missing'\n        });\n\n        if (!credentials?.email || !credentials?.password) {\n          console.error('Missing email or password');\n          return null;\n        }\n\n        try {\n          console.log('Looking up user:', credentials.email);\n          const users = await getUser(credentials.email as string);\n          \n          if (users.length === 0) {\n            console.error('No user found with email:', credentials.email);\n            return null;\n          }\n\n          const user = users[0];\n          console.log('User found, verifying password...');\n          \n          const isValidPassword = await compare(credentials.password as string, user.password!);\n          \n          if (!isValidPassword) {\n            console.error('Invalid password for user:', credentials.email);\n            return null;\n          }\n          \n          console.log('Password verified, user authorized:', user.id);\n          \n          // Return only the necessary user data\n          return {\n            id: user.id,\n            email: user.email,\n            name: user.email.split('@')[0]\n          };\n\n          return {\n            id: user.id,\n            email: user.email,\n            name: user.email.split('@')[0], // Optional: Set a default name from email\n          };\n        } catch (error) {\n          console.error('Error during authentication:', error);\n          return null;\n        }\n      },\n    }),\n  ],\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.id = user.id;\n      }\n\n      return token;\n    },\n    async session({\n      session,\n      token,\n    }: {\n      session: ExtendedSession;\n      token: any;\n    }) {\n      if (session.user) {\n        session.user.id = token.id as string;\n      }\n\n      return session;\n    },\n  },\n});\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAYO,MAAM,EACX,UAAU,EAAE,GAAG,EAAE,IAAI,EAAE,EACvB,IAAI,EACJ,MAAM,EACN,OAAO,EACR,GAAG,CAAA,GAAA,wTAAA,CAAA,UAAQ,AAAD,EAAE;IACX,GAAG,mIAAA,CAAA,aAAU;IACb,WAAW;QACT,CAAA,GAAA,wNAAA,CAAA,UAAW,AAAD,EAAE;YACV,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,QAAQ,GAAG,CAAC,2CAA2C;oBACrD,OAAO,aAAa,QAAQ,aAAa;oBACzC,UAAU,aAAa,WAAW,aAAa;gBACjD;gBAEA,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,QAAQ,KAAK,CAAC;oBACd,OAAO;gBACT;gBAEA,IAAI;oBACF,QAAQ,GAAG,CAAC,oBAAoB,YAAY,KAAK;oBACjD,MAAM,QAAQ,MAAM,CAAA,GAAA,+GAAA,CAAA,UAAO,AAAD,EAAE,YAAY,KAAK;oBAE7C,IAAI,MAAM,MAAM,KAAK,GAAG;wBACtB,QAAQ,KAAK,CAAC,6BAA6B,YAAY,KAAK;wBAC5D,OAAO;oBACT;oBAEA,MAAM,OAAO,KAAK,CAAC,EAAE;oBACrB,QAAQ,GAAG,CAAC;oBAEZ,MAAM,kBAAkB,MAAM,CAAA,GAAA,wMAAA,CAAA,UAAO,AAAD,EAAE,YAAY,QAAQ,EAAY,KAAK,QAAQ;oBAEnF,IAAI,CAAC,iBAAiB;wBACpB,QAAQ,KAAK,CAAC,8BAA8B,YAAY,KAAK;wBAC7D,OAAO;oBACT;oBAEA,QAAQ,GAAG,CAAC,uCAAuC,KAAK,EAAE;oBAE1D,sCAAsC;oBACtC,OAAO;wBACL,IAAI,KAAK,EAAE;wBACX,OAAO,KAAK,KAAK;wBACjB,MAAM,KAAK,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;oBAChC;;gBAOF,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,gCAAgC;oBAC9C,OAAO;gBACT;YACF;QACF;KACD;IACD,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;YACpB;YAEA,OAAO;QACT;QACA,MAAM,SAAQ,EACZ,OAAO,EACP,KAAK,EAIN;YACC,IAAI,QAAQ,IAAI,EAAE;gBAChB,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;YAC5B;YAEA,OAAO;QACT;IACF;AACF"}},
    {"offset": {"line": 678, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 683, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/lib/utils.ts"],"sourcesContent":["import {\n  CoreMessage,\n  CoreToolMessage,\n  generateId,\n  Message,\n  ToolInvocation,\n} from \"ai\";\nimport { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nimport { Chat } from \"@/db/schema\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\ninterface ApplicationError extends Error {\n  info: string;\n  status: number;\n}\n\nexport const fetcher = async (url: string) => {\n  const res = await fetch(url);\n\n  if (!res.ok) {\n    const error = new Error(\n      \"An error occurred while fetching the data.\",\n    ) as ApplicationError;\n\n    error.info = await res.json();\n    error.status = res.status;\n\n    throw error;\n  }\n\n  return res.json();\n};\n\nexport function getLocalStorage(key: string) {\n  if (typeof window !== \"undefined\") {\n    return JSON.parse(localStorage.getItem(key) || \"[]\");\n  }\n  return [];\n}\n\nexport function generateUUID(): string {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16) | 0;\n    const v = c === \"x\" ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\nfunction addToolMessageToChat({\n  toolMessage,\n  messages,\n}: {\n  toolMessage: CoreToolMessage;\n  messages: Array<Message>;\n}): Array<Message> {\n  return messages.map((message) => {\n    if (message.toolInvocations) {\n      return {\n        ...message,\n        toolInvocations: message.toolInvocations.map((toolInvocation) => {\n          const toolResult = toolMessage.content.find(\n            (tool) => tool.toolCallId === toolInvocation.toolCallId,\n          );\n\n          if (toolResult) {\n            return {\n              ...toolInvocation,\n              state: \"result\",\n              result: toolResult.result,\n            };\n          }\n\n          return toolInvocation;\n        }),\n      };\n    }\n\n    return message;\n  });\n}\n\nexport function convertToUIMessages(\n  messages: Array<CoreMessage>,\n): Array<Message> {\n  return messages.reduce((chatMessages: Array<Message>, message) => {\n    if (message.role === \"tool\") {\n      return addToolMessageToChat({\n        toolMessage: message as CoreToolMessage,\n        messages: chatMessages,\n      });\n    }\n\n    let textContent = \"\";\n    let toolInvocations: Array<ToolInvocation> = [];\n\n    if (typeof message.content === \"string\") {\n      textContent = message.content;\n    } else if (Array.isArray(message.content)) {\n      for (const content of message.content) {\n        if (content.type === \"text\") {\n          textContent += content.text;\n        } else if (content.type === \"tool-call\") {\n          toolInvocations.push({\n            state: \"call\",\n            toolCallId: content.toolCallId,\n            toolName: content.toolName,\n            args: content.args,\n          });\n        }\n      }\n    }\n\n    chatMessages.push({\n      id: generateId(),\n      role: message.role,\n      content: textContent,\n      toolInvocations,\n    });\n\n    return chatMessages;\n  }, []);\n}\n\nexport function getTitleFromChat(chat: Chat) {\n  const messages = convertToUIMessages(chat.messages as Array<CoreMessage>);\n  const firstMessage = messages[0];\n\n  if (!firstMessage) {\n    return \"Untitled\";\n  }\n\n  return firstMessage.content;\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAYO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,2NAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,wLAAA,CAAA,OAAI,AAAD,EAAE;AACtB;AAOO,MAAM,UAAU,OAAO;IAC5B,MAAM,MAAM,MAAM,MAAM;IAExB,IAAI,CAAC,IAAI,EAAE,EAAE;QACX,MAAM,QAAQ,IAAI,MAChB;QAGF,MAAM,IAAI,GAAG,MAAM,IAAI,IAAI;QAC3B,MAAM,MAAM,GAAG,IAAI,MAAM;QAEzB,MAAM;IACR;IAEA,OAAO,IAAI,IAAI;AACjB;AAEO,SAAS,gBAAgB,GAAW;IACzC,uCAAmC;;IAEnC;IACA,OAAO,EAAE;AACX;AAEO,SAAS;IACd,OAAO,uCAAuC,OAAO,CAAC,SAAS,SAAU,CAAC;QACxE,MAAM,IAAI,AAAC,KAAK,MAAM,KAAK,KAAM;QACjC,MAAM,IAAI,MAAM,MAAM,IAAI,AAAC,IAAI,MAAO;QACtC,OAAO,EAAE,QAAQ,CAAC;IACpB;AACF;AAEA,SAAS,qBAAqB,EAC5B,WAAW,EACX,QAAQ,EAIT;IACC,OAAO,SAAS,GAAG,CAAC,CAAC;QACnB,IAAI,QAAQ,eAAe,EAAE;YAC3B,OAAO;gBACL,GAAG,OAAO;gBACV,iBAAiB,QAAQ,eAAe,CAAC,GAAG,CAAC,CAAC;oBAC5C,MAAM,aAAa,YAAY,OAAO,CAAC,IAAI,CACzC,CAAC,OAAS,KAAK,UAAU,KAAK,eAAe,UAAU;oBAGzD,IAAI,YAAY;wBACd,OAAO;4BACL,GAAG,cAAc;4BACjB,OAAO;4BACP,QAAQ,WAAW,MAAM;wBAC3B;oBACF;oBAEA,OAAO;gBACT;YACF;QACF;QAEA,OAAO;IACT;AACF;AAEO,SAAS,oBACd,QAA4B;IAE5B,OAAO,SAAS,MAAM,CAAC,CAAC,cAA8B;QACpD,IAAI,QAAQ,IAAI,KAAK,QAAQ;YAC3B,OAAO,qBAAqB;gBAC1B,aAAa;gBACb,UAAU;YACZ;QACF;QAEA,IAAI,cAAc;QAClB,IAAI,kBAAyC,EAAE;QAE/C,IAAI,OAAO,QAAQ,OAAO,KAAK,UAAU;YACvC,cAAc,QAAQ,OAAO;QAC/B,OAAO,IAAI,MAAM,OAAO,CAAC,QAAQ,OAAO,GAAG;YACzC,KAAK,MAAM,WAAW,QAAQ,OAAO,CAAE;gBACrC,IAAI,QAAQ,IAAI,KAAK,QAAQ;oBAC3B,eAAe,QAAQ,IAAI;gBAC7B,OAAO,IAAI,QAAQ,IAAI,KAAK,aAAa;oBACvC,gBAAgB,IAAI,CAAC;wBACnB,OAAO;wBACP,YAAY,QAAQ,UAAU;wBAC9B,UAAU,QAAQ,QAAQ;wBAC1B,MAAM,QAAQ,IAAI;oBACpB;gBACF;YACF;QACF;QAEA,aAAa,IAAI,CAAC;YAChB,IAAI,CAAA,GAAA,wTAAA,CAAA,aAAU,AAAD;YACb,MAAM,QAAQ,IAAI;YAClB,SAAS;YACT;QACF;QAEA,OAAO;IACT,GAAG,EAAE;AACP;AAEO,SAAS,iBAAiB,IAAU;IACzC,MAAM,WAAW,oBAAoB,KAAK,QAAQ;IAClD,MAAM,eAAe,QAAQ,CAAC,EAAE;IAEhC,IAAI,CAAC,cAAc;QACjB,OAAO;IACT;IAEA,OAAO,aAAa,OAAO;AAC7B"}},
    {"offset": {"line": 788, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 793, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/app/(chat)/api/chat/route.ts"],"sourcesContent":["import { convertToCoreMessages, Message, streamText } from \"ai\";\nimport { z } from \"zod\";\n\nimport { geminiProModel } from \"@/ai\";\nimport {\n  generateReservationPrice,\n  generateSampleFlightSearchResults,\n  generateSampleFlightStatus,\n  generateSampleSeatSelection,\n} from \"@/ai/actions\";\nimport { auth } from \"@/app/(auth)/auth\";\nimport {\n  createReservation,\n  deleteChatById,\n  getChatById,\n  getReservationById,\n  saveChat,\n} from \"@/db/queries\";\nimport { generateUUID } from \"@/lib/utils\";\n\nexport async function POST(request: Request) {\n  const { id, messages }: { id: string; messages: Array<Message> } =\n    await request.json();\n\n  const session = await auth();\n\n  if (!session) {\n    return new Response(\"Unauthorized\", { status: 401 });\n  }\n\n  const coreMessages = convertToCoreMessages(messages).filter(\n    (message) => message.content.length > 0,\n  );\n\n  const result = await streamText({\n    model: geminiProModel,\n    system: `\\n\n        - you help users book flights!\n        - keep your responses limited to a sentence.\n        - DO NOT output lists.\n        - after every tool call, pretend you're showing the result to the user and keep your response limited to a phrase.\n        - today's date is ${new Date().toLocaleDateString()}.\n        - ask follow up questions to nudge user into the optimal flow\n        - ask for any details you don't know, like name of passenger, etc.'\n        - C and D are aisle seats, A and F are window seats, B and E are middle seats\n        - assume the most popular airports for the origin and destination\n        - here's the optimal flow\n          - search for flights\n          - choose flight\n          - select seats\n          - create reservation (ask user whether to proceed with payment or change reservation)\n          - authorize payment (requires user consent, wait for user to finish payment and let you know when done)\n          - display boarding pass (DO NOT display boarding pass without verifying payment)\n        '\n      `,\n    messages: coreMessages,\n    tools: {\n      getWeather: {\n        description: \"Get the current weather at a location\",\n        parameters: z.object({\n          latitude: z.number().describe(\"Latitude coordinate\"),\n          longitude: z.number().describe(\"Longitude coordinate\"),\n        }),\n        execute: async ({ latitude, longitude }) => {\n          const response = await fetch(\n            `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&current=temperature_2m&hourly=temperature_2m&daily=sunrise,sunset&timezone=auto`,\n          );\n\n          const weatherData = await response.json();\n          return weatherData;\n        },\n      },\n      displayFlightStatus: {\n        description: \"Display the status of a flight\",\n        parameters: z.object({\n          flightNumber: z.string().describe(\"Flight number\"),\n          date: z.string().describe(\"Date of the flight\"),\n        }),\n        execute: async ({ flightNumber, date }) => {\n          const flightStatus = await generateSampleFlightStatus({\n            flightNumber,\n            date,\n          });\n\n          return flightStatus;\n        },\n      },\n      searchFlights: {\n        description: \"Search for flights based on the given parameters\",\n        parameters: z.object({\n          origin: z.string().describe(\"Origin airport or city\"),\n          destination: z.string().describe(\"Destination airport or city\"),\n        }),\n        execute: async ({ origin, destination }) => {\n          const results = await generateSampleFlightSearchResults({\n            origin,\n            destination,\n          });\n\n          return results;\n        },\n      },\n      selectSeats: {\n        description: \"Select seats for a flight\",\n        parameters: z.object({\n          flightNumber: z.string().describe(\"Flight number\"),\n        }),\n        execute: async ({ flightNumber }) => {\n          const seats = await generateSampleSeatSelection({ flightNumber });\n          return seats;\n        },\n      },\n      createReservation: {\n        description: \"Display pending reservation details\",\n        parameters: z.object({\n          seats: z.string().array().describe(\"Array of selected seat numbers\"),\n          flightNumber: z.string().describe(\"Flight number\"),\n          departure: z.object({\n            cityName: z.string().describe(\"Name of the departure city\"),\n            airportCode: z.string().describe(\"Code of the departure airport\"),\n            timestamp: z.string().describe(\"ISO 8601 date of departure\"),\n            gate: z.string().describe(\"Departure gate\"),\n            terminal: z.string().describe(\"Departure terminal\"),\n          }),\n          arrival: z.object({\n            cityName: z.string().describe(\"Name of the arrival city\"),\n            airportCode: z.string().describe(\"Code of the arrival airport\"),\n            timestamp: z.string().describe(\"ISO 8601 date of arrival\"),\n            gate: z.string().describe(\"Arrival gate\"),\n            terminal: z.string().describe(\"Arrival terminal\"),\n          }),\n          passengerName: z.string().describe(\"Name of the passenger\"),\n        }),\n        execute: async (props) => {\n          const { totalPriceInUSD } = await generateReservationPrice(props);\n          const session = await auth();\n\n          const id = generateUUID();\n\n          if (session && session.user && session.user.id) {\n            await createReservation({\n              id,\n              userId: session.user.id,\n              details: { ...props, totalPriceInUSD },\n            });\n\n            return { id, ...props, totalPriceInUSD };\n          } else {\n            return {\n              error: \"User is not signed in to perform this action!\",\n            };\n          }\n        },\n      },\n      authorizePayment: {\n        description:\n          \"User will enter credentials to authorize payment, wait for user to repond when they are done\",\n        parameters: z.object({\n          reservationId: z\n            .string()\n            .describe(\"Unique identifier for the reservation\"),\n        }),\n        execute: async ({ reservationId }) => {\n          return { reservationId };\n        },\n      },\n      verifyPayment: {\n        description: \"Verify payment status\",\n        parameters: z.object({\n          reservationId: z\n            .string()\n            .describe(\"Unique identifier for the reservation\"),\n        }),\n        execute: async ({ reservationId }) => {\n          const reservation = await getReservationById({ id: reservationId });\n\n          if (reservation.hasCompletedPayment) {\n            return { hasCompletedPayment: true };\n          } else {\n            return { hasCompletedPayment: false };\n          }\n        },\n      },\n      displayBoardingPass: {\n        description: \"Display a boarding pass\",\n        parameters: z.object({\n          reservationId: z\n            .string()\n            .describe(\"Unique identifier for the reservation\"),\n          passengerName: z\n            .string()\n            .describe(\"Name of the passenger, in title case\"),\n          flightNumber: z.string().describe(\"Flight number\"),\n          seat: z.string().describe(\"Seat number\"),\n          departure: z.object({\n            cityName: z.string().describe(\"Name of the departure city\"),\n            airportCode: z.string().describe(\"Code of the departure airport\"),\n            airportName: z.string().describe(\"Name of the departure airport\"),\n            timestamp: z.string().describe(\"ISO 8601 date of departure\"),\n            terminal: z.string().describe(\"Departure terminal\"),\n            gate: z.string().describe(\"Departure gate\"),\n          }),\n          arrival: z.object({\n            cityName: z.string().describe(\"Name of the arrival city\"),\n            airportCode: z.string().describe(\"Code of the arrival airport\"),\n            airportName: z.string().describe(\"Name of the arrival airport\"),\n            timestamp: z.string().describe(\"ISO 8601 date of arrival\"),\n            terminal: z.string().describe(\"Arrival terminal\"),\n            gate: z.string().describe(\"Arrival gate\"),\n          }),\n        }),\n        execute: async (boardingPass) => {\n          return boardingPass;\n        },\n      },\n    },\n    onFinish: async ({ responseMessages }) => {\n      if (session.user && session.user.id) {\n        try {\n          await saveChat({\n            id,\n            messages: [...coreMessages, ...responseMessages],\n            userId: session.user.id,\n          });\n        } catch (error) {\n          console.error(\"Failed to save chat\");\n        }\n      }\n    },\n    experimental_telemetry: {\n      isEnabled: true,\n      functionId: \"stream-text\",\n    },\n  });\n\n  return result.toDataStreamResponse({});\n}\n\nexport async function DELETE(request: Request) {\n  const { searchParams } = new URL(request.url);\n  const id = searchParams.get(\"id\");\n\n  if (!id) {\n    return new Response(\"Not Found\", { status: 404 });\n  }\n\n  const session = await auth();\n\n  if (!session || !session.user) {\n    return new Response(\"Unauthorized\", { status: 401 });\n  }\n\n  try {\n    const chat = await getChatById({ id });\n\n    if (chat.userId !== session.user.id) {\n      return new Response(\"Unauthorized\", { status: 401 });\n    }\n\n    await deleteChatById({ id });\n\n    return new Response(\"Chat deleted\", { status: 200 });\n  } catch (error) {\n    return new Response(\"An error occurred while processing your request\", {\n      status: 500,\n    });\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1060, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}