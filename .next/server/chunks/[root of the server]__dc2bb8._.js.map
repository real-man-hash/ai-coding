{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 169, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/db/schema.ts"],"sourcesContent":["import { Message } from \"ai\";\nimport { InferSelectModel } from \"drizzle-orm\";\nimport {\n  mysqlTable,\n  varchar,\n  timestamp,\n  json,\n  char,\n  boolean,\n  int,\n} from \"drizzle-orm/mysql-core\";\n\nexport const user = mysqlTable(\"user\", {\n  id: char(\"id\", { length: 36 }).primaryKey().notNull().$defaultFn(() => crypto.randomUUID()),\n  email: varchar(\"email\", { length: 64 }).notNull(),\n  password: varchar(\"password\", { length: 64 }),\n  createdAt: timestamp(\"createdAt\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updatedAt\").onUpdateNow(),\n});\n\nexport type User = InferSelectModel<typeof user>;\n\nexport const chat = mysqlTable(\"chat\", {\n  id: char(\"id\", { length: 36 }).primaryKey().notNull().$defaultFn(() => crypto.randomUUID()),\n  createdAt: timestamp(\"createdAt\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updatedAt\").onUpdateNow(),\n  messages: json(\"messages\").notNull(),\n  userId: char(\"userId\", { length: 36 })\n    .notNull()\n    .references(() => user.id, { onDelete: 'cascade' }),\n});\n\nexport type Chat = Omit<InferSelectModel<typeof chat>, \"messages\"> & {\n  messages: Array<Message>;\n};\n\nexport const reservation = mysqlTable(\"reservation\", {\n  id: char(\"id\", { length: 36 }).primaryKey().notNull().$defaultFn(() => crypto.randomUUID()),\n  createdAt: timestamp(\"createdAt\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updatedAt\").onUpdateNow(),\n  details: json(\"details\").notNull(),\n  hasCompletedPayment: boolean(\"hasCompletedPayment\").notNull().default(false),\n  userId: char(\"userId\", { length: 36 })\n    .notNull()\n    .references(() => user.id, { onDelete: 'cascade' }),\n});\n\nexport type Reservation = InferSelectModel<typeof reservation>;\n"],"names":[],"mappings":";;;;;;;;;;;;;AAYO,MAAM,OAAO,CAAA,GAAA,oUAAA,CAAA,aAAU,AAAD,EAAE,QAAQ;IACrC,IAAI,CAAA,GAAA,8UAAA,CAAA,OAAI,AAAD,EAAE,MAAM;QAAE,QAAQ;IAAG,GAAG,UAAU,GAAG,OAAO,GAAG,UAAU,CAAC,IAAM,OAAO,UAAU;IACxF,OAAO,CAAA,GAAA,iVAAA,CAAA,UAAO,AAAD,EAAE,SAAS;QAAE,QAAQ;IAAG,GAAG,OAAO;IAC/C,UAAU,CAAA,GAAA,iVAAA,CAAA,UAAO,AAAD,EAAE,YAAY;QAAE,QAAQ;IAAG;IAC3C,WAAW,CAAA,GAAA,mVAAA,CAAA,YAAS,AAAD,EAAE,aAAa,OAAO,GAAG,UAAU;IACtD,WAAW,CAAA,GAAA,mVAAA,CAAA,YAAS,AAAD,EAAE,aAAa,WAAW;AAC/C;AAIO,MAAM,OAAO,CAAA,GAAA,oUAAA,CAAA,aAAU,AAAD,EAAE,QAAQ;IACrC,IAAI,CAAA,GAAA,8UAAA,CAAA,OAAI,AAAD,EAAE,MAAM;QAAE,QAAQ;IAAG,GAAG,UAAU,GAAG,OAAO,GAAG,UAAU,CAAC,IAAM,OAAO,UAAU;IACxF,WAAW,CAAA,GAAA,mVAAA,CAAA,YAAS,AAAD,EAAE,aAAa,OAAO,GAAG,UAAU;IACtD,WAAW,CAAA,GAAA,mVAAA,CAAA,YAAS,AAAD,EAAE,aAAa,WAAW;IAC7C,UAAU,CAAA,GAAA,8UAAA,CAAA,OAAI,AAAD,EAAE,YAAY,OAAO;IAClC,QAAQ,CAAA,GAAA,8UAAA,CAAA,OAAI,AAAD,EAAE,UAAU;QAAE,QAAQ;IAAG,GACjC,OAAO,GACP,UAAU,CAAC,IAAM,KAAK,EAAE,EAAE;QAAE,UAAU;IAAU;AACrD;AAMO,MAAM,cAAc,CAAA,GAAA,oUAAA,CAAA,aAAU,AAAD,EAAE,eAAe;IACnD,IAAI,CAAA,GAAA,8UAAA,CAAA,OAAI,AAAD,EAAE,MAAM;QAAE,QAAQ;IAAG,GAAG,UAAU,GAAG,OAAO,GAAG,UAAU,CAAC,IAAM,OAAO,UAAU;IACxF,WAAW,CAAA,GAAA,mVAAA,CAAA,YAAS,AAAD,EAAE,aAAa,OAAO,GAAG,UAAU;IACtD,WAAW,CAAA,GAAA,mVAAA,CAAA,YAAS,AAAD,EAAE,aAAa,WAAW;IAC7C,SAAS,CAAA,GAAA,8UAAA,CAAA,OAAI,AAAD,EAAE,WAAW,OAAO;IAChC,qBAAqB,CAAA,GAAA,iVAAA,CAAA,UAAO,AAAD,EAAE,uBAAuB,OAAO,GAAG,OAAO,CAAC;IACtE,QAAQ,CAAA,GAAA,8UAAA,CAAA,OAAI,AAAD,EAAE,UAAU;QAAE,QAAQ;IAAG,GACjC,OAAO,GACP,UAAU,CAAC,IAAM,KAAK,EAAE,EAAE;QAAE,UAAU;IAAU;AACrD"}},
    {"offset": {"line": 222, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 234, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/db/queries.ts"],"sourcesContent":["import \"server-only\";\n\nimport { genSaltSync, hashSync } from \"bcrypt-ts\";\nimport { desc, eq, and } from \"drizzle-orm\";\nimport { drizzle } from \"drizzle-orm/mysql2\";\nimport mysql from \"mysql2/promise\";\n\nimport { user, chat, User, reservation, Chat, Reservation } from \"./schema\";\n\n// Create a connection pool\nconst pool = mysql.createPool({\n  uri: process.env.DATABASE_URL,\n  waitForConnections: true,\n  connectionLimit: 10,\n  queueLimit: 0\n});\n\nconst db = drizzle(pool);\n\nexport async function getUser(email: string): Promise<User[]> {\n  try {\n    const result = await db.select().from(user).where(eq(user.email, email));\n    return result || [];\n  } catch (error) {\n    console.error(\"Failed to get user from database\", error);\n    return [];\n  }\n}\n\nexport async function createUser(email: string, password: string): Promise<User> {\n  const connection = await pool.getConnection();\n  try {\n    await connection.beginTransaction();\n    \n    const salt = genSaltSync(10);\n    const hash = hashSync(password, salt);\n    \n    // First insert the user\n    await db.insert(user).values({ \n      email, \n      password: hash,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    });\n    \n    // Then fetch the newly created user\n    const [newUser] = await db.select()\n      .from(user)\n      .where(eq(user.email, email))\n      .limit(1);\n    \n    await connection.commit();\n    \n    if (!newUser) {\n      throw new Error('Failed to retrieve created user');\n    }\n    \n    return newUser;\n  } catch (error) {\n    await connection.rollback();\n    console.error(\"Failed to create user in database\", error);\n    throw error;\n  } finally {\n    connection.release();\n  }\n}\n\nexport async function saveChat({\n  id,\n  messages,\n  userId,\n}: {\n  id: string;\n  messages: any;\n  userId: string;\n}): Promise<Chat> {\n  const connection = await pool.getConnection();\n  try {\n    await connection.beginTransaction();\n    \n    const existingChat = await db\n      .select()\n      .from(chat)\n      .where(eq(chat.id, id));\n\n    let result;\n    if (existingChat.length > 0) {\n      [result] = await db\n        .update(chat)\n        .set({ \n          messages: JSON.stringify(messages),\n          updatedAt: new Date()\n        })\n        .where(eq(chat.id, id));\n    } else {\n      [result] = await db.insert(chat).values({\n        id,\n        messages: JSON.stringify(messages),\n        userId,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      });\n    }\n    \n    await connection.commit();\n    \n    // Fetch the saved chat to return\n    const [savedChat] = await db.select()\n      .from(chat)\n      .where(eq(chat.id, id))\n      .limit(1);\n      \n    return savedChat;\n  } catch (error) {\n    await connection.rollback();\n    console.error(\"Failed to save chat to database\", error);\n    throw error;\n  } finally {\n    connection.release();\n  }\n}\n\nexport async function deleteChatById({ id }: { id: string }): Promise<void> {\n  const connection = await pool.getConnection();\n  try {\n    await connection.beginTransaction();\n    await db.delete(chat).where(eq(chat.id, id));\n    await connection.commit();\n  } catch (error) {\n    await connection.rollback();\n    console.error(\"Failed to delete chat from database\", error);\n    throw error;\n  } finally {\n    connection.release();\n  }\n}\n\nexport async function getChatsByUserId({ id }: { id: string }): Promise<Chat[]> {\n  try {\n    return await db\n      .select()\n      .from(chat)\n      .where(eq(chat.userId, id))\n      .orderBy(desc(chat.createdAt));\n  } catch (error) {\n    console.error(\"Failed to get chats from database\", error);\n    throw error;\n  }\n}\n\nexport async function getChatById({ id }: { id: string }): Promise<Chat | undefined> {\n  try {\n    const [result] = await db\n      .select()\n      .from(chat)\n      .where(eq(chat.id, id))\n      .limit(1);\n    return result;\n  } catch (error) {\n    console.error(\"Failed to get chat from database\", error);\n    throw error;\n  }\n}\n\nexport async function createReservation({\n  id,\n  userId,\n  details,\n}: {\n  id: string;\n  userId: string;\n  details: any;\n}): Promise<Reservation> {\n  const connection = await pool.getConnection();\n  try {\n    await connection.beginTransaction();\n    \n    await db.insert(reservation).values({\n      id,\n      userId,\n      details: JSON.stringify(details),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      hasCompletedPayment: false\n    });\n    \n    await connection.commit();\n    \n    // Fetch the created reservation to return\n    const [newReservation] = await db\n      .select()\n      .from(reservation)\n      .where(eq(reservation.id, id))\n      .limit(1);\n      \n    return newReservation;\n  } catch (error) {\n    await connection.rollback();\n    console.error(\"Failed to create reservation in database\", error);\n    throw error;\n  } finally {\n    connection.release();\n  }\n}\n\nexport async function getReservationById({ id }: { id: string }): Promise<Reservation | undefined> {\n  try {\n    const [selectedReservation] = await db\n      .select()\n      .from(reservation)\n      .where(eq(reservation.id, id));\n\n    return selectedReservation;\n  } catch (error) {\n    console.error(\"Failed to get reservation from database\", error);\n    throw error;\n  }\n}\n\nexport async function updateReservation({\n  id,\n  hasCompletedPayment,\n}: {\n  id: string;\n  hasCompletedPayment: boolean;\n}): Promise<Reservation> {\n  const connection = await pool.getConnection();\n  try {\n    await connection.beginTransaction();\n    \n    await db\n      .update(reservation)\n      .set({ \n        hasCompletedPayment,\n        updatedAt: new Date()\n      })\n      .where(eq(reservation.id, id));\n      \n    await connection.commit();\n    \n    // Fetch the updated reservation to return\n    const [updatedReservation] = await db\n      .select()\n      .from(reservation)\n      .where(eq(reservation.id, id))\n      .limit(1);\n      \n    return updatedReservation;\n  } catch (error) {\n    await connection.rollback();\n    console.error(\"Failed to update reservation in database\", error);\n    throw error;\n  } finally {\n    connection.release();\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 420, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 425, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/app/(auth)/auth.config.ts"],"sourcesContent":["import { NextAuthConfig } from \"next-auth\";\n\nexport const authConfig = {\n  pages: {\n    signIn: \"/login\",\n    newUser: \"/\",\n  },\n  providers: [\n    // added later in auth.ts since it requires bcrypt which is only compatible with Node.js\n    // while this file is also used in non-Node.js environments\n  ],\n  callbacks: {\n    authorized({ auth, request: { nextUrl } }) {\n      let isLoggedIn = !!auth?.user;\n      let isOnChat = nextUrl.pathname.startsWith(\"/\");\n      let isOnRegister = nextUrl.pathname.startsWith(\"/register\");\n      let isOnLogin = nextUrl.pathname.startsWith(\"/login\");\n\n      if (isLoggedIn && (isOnLogin || isOnRegister)) {\n        return Response.redirect(new URL(\"/\", nextUrl));\n      }\n\n      if (isOnRegister || isOnLogin) {\n        return true; // Always allow access to register and login pages\n      }\n\n      if (isOnChat) {\n        if (isLoggedIn) return true;\n        return false; // Redirect unauthenticated users to login page\n      }\n\n      if (isLoggedIn) {\n        return Response.redirect(new URL(\"/\", nextUrl));\n      }\n\n      return true;\n    },\n  },\n} satisfies NextAuthConfig;\n"],"names":[],"mappings":";;;AAEO,MAAM,aAAa;IACxB,OAAO;QACL,QAAQ;QACR,SAAS;IACX;IACA,WAAW,EAGV;IACD,WAAW;QACT,YAAW,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,EAAE;YACvC,IAAI,aAAa,CAAC,CAAC,MAAM;YACzB,IAAI,WAAW,QAAQ,QAAQ,CAAC,UAAU,CAAC;YAC3C,IAAI,eAAe,QAAQ,QAAQ,CAAC,UAAU,CAAC;YAC/C,IAAI,YAAY,QAAQ,QAAQ,CAAC,UAAU,CAAC;YAE5C,IAAI,cAAc,CAAC,aAAa,YAAY,GAAG;gBAC7C,OAAO,SAAS,QAAQ,CAAC,IAAI,IAAI,KAAK;YACxC;YAEA,IAAI,gBAAgB,WAAW;gBAC7B,OAAO,MAAM,kDAAkD;YACjE;YAEA,IAAI,UAAU;gBACZ,IAAI,YAAY,OAAO;gBACvB,OAAO,OAAO,+CAA+C;YAC/D;YAEA,IAAI,YAAY;gBACd,OAAO,SAAS,QAAQ,CAAC,IAAI,IAAI,KAAK;YACxC;YAEA,OAAO;QACT;IACF;AACF"}},
    {"offset": {"line": 457, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 462, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/app/(auth)/auth.ts"],"sourcesContent":["import { compare } from \"bcrypt-ts\";\nimport NextAuth, { User, Session } from \"next-auth\";\nimport Credentials from \"next-auth/providers/credentials\";\n\nimport { getUser } from \"@/db/queries\";\n\nimport { authConfig } from \"./auth.config\";\n\ninterface ExtendedSession extends Session {\n  user: User;\n}\n\nexport const {\n  handlers: { GET, POST },\n  auth,\n  signIn,\n  signOut,\n} = NextAuth({\n  ...authConfig,\n  providers: [\n    Credentials({\n      credentials: {\n        email: { label: \"Email\", type: \"email\" },\n        password: { label: \"Password\", type: \"password\" }\n      },\n      async authorize(credentials) {\n        console.log('Authorization attempt with credentials:', {\n          email: credentials?.email ? 'provided' : 'missing',\n          password: credentials?.password ? 'provided' : 'missing'\n        });\n\n        if (!credentials?.email || !credentials?.password) {\n          console.error('Missing email or password');\n          return null;\n        }\n\n        try {\n          console.log('Looking up user:', credentials.email);\n          const users = await getUser(credentials.email as string);\n          \n          if (users.length === 0) {\n            console.error('No user found with email:', credentials.email);\n            return null;\n          }\n\n          const user = users[0];\n          console.log('User found, verifying password...');\n          \n          const isValidPassword = await compare(credentials.password as string, user.password!);\n          \n          if (!isValidPassword) {\n            console.error('Invalid password for user:', credentials.email);\n            return null;\n          }\n          \n          console.log('Password verified, user authorized:', user.id);\n          \n          // Return only the necessary user data\n          return {\n            id: user.id,\n            email: user.email,\n            name: user.email.split('@')[0]\n          };\n\n          return {\n            id: user.id,\n            email: user.email,\n            name: user.email.split('@')[0], // Optional: Set a default name from email\n          };\n        } catch (error) {\n          console.error('Error during authentication:', error);\n          return null;\n        }\n      },\n    }),\n  ],\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.id = user.id;\n      }\n\n      return token;\n    },\n    async session({\n      session,\n      token,\n    }: {\n      session: ExtendedSession;\n      token: any;\n    }) {\n      if (session.user) {\n        session.user.id = token.id as string;\n      }\n\n      return session;\n    },\n  },\n});\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAYO,MAAM,EACX,UAAU,EAAE,GAAG,EAAE,IAAI,EAAE,EACvB,IAAI,EACJ,MAAM,EACN,OAAO,EACR,GAAG,CAAA,GAAA,wTAAA,CAAA,UAAQ,AAAD,EAAE;IACX,GAAG,mIAAA,CAAA,aAAU;IACb,WAAW;QACT,CAAA,GAAA,wNAAA,CAAA,UAAW,AAAD,EAAE;YACV,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,QAAQ,GAAG,CAAC,2CAA2C;oBACrD,OAAO,aAAa,QAAQ,aAAa;oBACzC,UAAU,aAAa,WAAW,aAAa;gBACjD;gBAEA,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,QAAQ,KAAK,CAAC;oBACd,OAAO;gBACT;gBAEA,IAAI;oBACF,QAAQ,GAAG,CAAC,oBAAoB,YAAY,KAAK;oBACjD,MAAM,QAAQ,MAAM,CAAA,GAAA,+GAAA,CAAA,UAAO,AAAD,EAAE,YAAY,KAAK;oBAE7C,IAAI,MAAM,MAAM,KAAK,GAAG;wBACtB,QAAQ,KAAK,CAAC,6BAA6B,YAAY,KAAK;wBAC5D,OAAO;oBACT;oBAEA,MAAM,OAAO,KAAK,CAAC,EAAE;oBACrB,QAAQ,GAAG,CAAC;oBAEZ,MAAM,kBAAkB,MAAM,CAAA,GAAA,wMAAA,CAAA,UAAO,AAAD,EAAE,YAAY,QAAQ,EAAY,KAAK,QAAQ;oBAEnF,IAAI,CAAC,iBAAiB;wBACpB,QAAQ,KAAK,CAAC,8BAA8B,YAAY,KAAK;wBAC7D,OAAO;oBACT;oBAEA,QAAQ,GAAG,CAAC,uCAAuC,KAAK,EAAE;oBAE1D,sCAAsC;oBACtC,OAAO;wBACL,IAAI,KAAK,EAAE;wBACX,OAAO,KAAK,KAAK;wBACjB,MAAM,KAAK,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;oBAChC;;gBAOF,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,gCAAgC;oBAC9C,OAAO;gBACT;YACF;QACF;KACD;IACD,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;YACpB;YAEA,OAAO;QACT;QACA,MAAM,SAAQ,EACZ,OAAO,EACP,KAAK,EAIN;YACC,IAAI,QAAQ,IAAI,EAAE;gBAChB,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;YAC5B;YAEA,OAAO;QACT;IACF;AACF"}},
    {"offset": {"line": 549, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 554, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/app/(chat)/api/history/route.ts"],"sourcesContent":["import { auth } from \"@/app/(auth)/auth\";\nimport { getChatsByUserId } from \"@/db/queries\";\n\nexport async function GET() {\n  const session = await auth();\n\n  if (!session || !session.user) {\n    return Response.json(\"Unauthorized!\", { status: 401 });\n  }\n\n  const chats = await getChatsByUserId({ id: session.user.id! });\n  return Response.json(chats);\n}\n"],"names":[],"mappings":";;;;;;;;AAGO,eAAe;IACpB,MAAM,UAAU,MAAM,CAAA,GAAA,yHAAA,CAAA,OAAI,AAAD;IAEzB,IAAI,CAAC,WAAW,CAAC,QAAQ,IAAI,EAAE;QAC7B,OAAO,SAAS,IAAI,CAAC,iBAAiB;YAAE,QAAQ;QAAI;IACtD;IAEA,MAAM,QAAQ,MAAM,CAAA,GAAA,+GAAA,CAAA,mBAAgB,AAAD,EAAE;QAAE,IAAI,QAAQ,IAAI,CAAC,EAAE;IAAE;IAC5D,OAAO,SAAS,IAAI,CAAC;AACvB"}},
    {"offset": {"line": 574, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}